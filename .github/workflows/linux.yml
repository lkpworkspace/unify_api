name: Linux

on: [push, pull_request]

jobs:
  Ubuntu-latest:
    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        build_type: [Release, Debug]
        std: [17, 20]

    steps:
    - uses: actions/checkout@v3
    - run: sudo apt update
    - run: sudo apt install build-essential cmake ninja-build

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.10.0

    - name: Configure CMake
      env:
          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror ${{env.CXXFLAGS}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -S . -B ${{github.workspace}}/build_${{matrix.build_type}} \
          -DCMAKE_CXX_STANDARD=${{matrix.std}} \
          -DCMAKE_CXX_STANDARD_REQUIRED=ON \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install \
          -G Ninja \
          -Werror

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_${{matrix.build_type}} --config ${{matrix.build_type}}

    - name: Test
      run: ctest --test-dir ${{github.workspace}}/build_${{matrix.build_type}} -j$(nproc) --output-on-failure
